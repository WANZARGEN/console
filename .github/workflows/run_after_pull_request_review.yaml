name: "[Run] After PR Review"

on:
  workflow_run:
    workflows:
      - "[PR] Review"
    types:
      - completed
    branches:
      - master
      - feature-*

jobs:
  upload:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Get Input Variable
        id: get_input
        uses: actions/github-script@v5
        with:
          script: |
            const data = await github.repos.getPullRequest({owner: context.repo.owner, repo: context.repo.repo, pull_number: context.payload.workflow_run.pull_requests[0].number});
            console.log(JSON.stringify(data.data.user));
            console.log(JSON.stringify(data.data.requested_reviewers));
            console.log(JSON.stringify(data.data.requested_teams));

      - name: Get Pull Request Information
        id: pr_info
        run: |
          PR_NUMBER=$(jq -r '.workflow_run.event.pull_requests[0].number' $GITHUB_EVENT_PATH)
          PR_TITLE=$(jq -r '.workflow_run.event.pull_requests[0].title' $GITHUB_EVENT_PATH)
          PR_USER=$(jq -r '.workflow_run.event.pull_requests[0].user.login' $GITHUB_EVENT_PATH)

          - name: Display Pull Request Information
            run: |
              echo "Pull Request Number: $PR_NUMBER"
              echo "Pull Request Title: $PR_TITLE"
              echo "Pull Request User: $PR_USER"

#      - name: Use Input Variable
#        run: |
#          echo "Requester: ${{ fromJson(steps.get_input.outputs.result).requester }}"
#
#      - name: Make directory for downloaded artifact
#        run: mkdir -p ${{ github.workspace }}/artifact
#
#      - name: Download artifact
#        uses: actions/github-script@v3.1.0
#        with:
#          script: |
#            var artifacts = await github.actions.listWorkflowRunArtifacts({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               run_id: ${{ github.event.workflow_run.id }},
#            });
#            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
#              return artifact.name == "pr"
#            })[0];
#            var download = await github.actions.downloadArtifact({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               artifact_id: matchArtifact.id,
#               archive_format: 'zip',
#            });
#            var fs = require('fs');
#            fs.writeFileSync('${{ github.workspace }}/artifact/pr.zip', Buffer.from(download.data));
#
#      - name: Unzip artifact
#        run: unzip ./artifact/pr.zip
#
#      - name: Display structure of downloaded files
#        run: ls -R
#        working-directory: ${{ github.workspace }}/artifact
#
#      - name: Comment on PR
#        uses: actions/github-script@v3
#        with:
#          github-token: ${{ secrets.PAT_TOKEN }}
#          script: |
#            var fs = require('fs');
#            var issue_number = Number(fs.readFileSync('./NR'));
#            await github.issues.createComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: issue_number,
#              body: 'Everything is OK. Thank you for the PR!ðŸ˜„'
#            });
#
#      - name: Refine
#
#      - name: Upload artifact to console-artifacts
